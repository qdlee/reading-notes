关于div
	许多人以为div是没有语义的，但是div实际上代表部分(division),它可以将文档分割为几个有意义的区域。所以，通过将主要内容区域包围在div中并分配content类，就可以在文档中添加结构和意义。
	为了将不必要的标记减到最少，应该只在没有现有元素能够实现区域分割的情况下使用div元素。
微格式
	用来表示特定格式内容的模板
	网站：http://microformats.org
代码验证
	网站：http://validator.w3.org/
	方便web开发的bookmarklet(favelet):http://favelets.com
DOCTYPE声明
	必须要写
	必须写在文档的第一行(否则IE6会以混杂模式呈现页面)
伪类的组合
	例：在已访问链接和未访问链接上实现不同的鼠标悬停效果
	a:visited:hover{color:olive;}
子选择器
	在IE7中有一个小bug，如果父元素和子元素之间有注释，就会出问题(兄弟选择器也是如此)
	对于IE6及以下可以使用通用选择器来模拟子选择器的效果：先在所有后代上应用你所希望的效果，
	然后使用通过选择器覆盖子元素的后代上的样式
	#nav li{color:red;}
	#nav li *{color:green;}
outline-轮廓
	IE7及以下不支持轮廓
IE6与盒模型
	width属性是内容、内边距和边框的总和
外边距叠加
	只有普通文档流中的垂直外边距才会发生外边距叠加。行内框、浮动框和绝对定位框之间的外边距不会叠加。
css定位机制
	css有三种定位机制：普通流、浮动和绝对定位。
块级框和行级框
	在屏幕上看到的所有东西都形成某种框。
	块级框从上到下一个接一个的垂直排列，框之间的垂直距离由框的垂直外边距计算出来。
	行内框在一行中水平排列。可以使用水平内边距、边框和外边距调整它们的水平间距。但是，垂直内边距、边框和外边距不影响行内框的高度。同样，在行内框上设置显式的高度或宽度也没有影响。由一行形成的水平框称为行框，行框的高度总是足以容纳它包含的所有行内框。但是，设置行高可以增加这个框的高度。因此，修改行内框尺寸的唯一方法是修改行高或者水平边框、内边距或外边距。
绝对定位
	在IE6和IE5.5中有一个bug,如果要对相对于相对定位的框的右边或者底部设置绝对定位的框的位置，那么需要确保相对定位的框已经设置了尺寸，如果没有，那么IE会错误地相对于画布定位这个框。
固定定位
	IE6和更低版本不支持固定定位。
	IE7部分实现了这个属性，但在实现中有许多bug。
浮动的清理
	overflow值为hidden或auto时，会自动地清理包含的任何浮动元素。
	clearfix
		.clearfix:after{
			content:".";
			height:0;
			visibility:hidden;
			display:block;
			clear:both;
		}
	IE6及以下
	.clear{
		display:inline-block;
	}
	/* hack*/
	* html .clear {height:1%;}
	.clear{display:block;}
border-image属性
	允许指定一个图像作为元素的边框。可以根据一些简单的百分比规则把图像划分为9个单独的部分，浏览器会自动地使用适当的部分作为边框的对应部分。这种技术称为九分法绽放(nine-slice scaling),有助于避免在调整圆角柳框大小时通常会出现的失真。
IE6 png图像透明度问题
	1、使用专有的AlphaImageLoader过滤器，此代码会导致CSS失效，最好把它放在IE6专用的样式中
		filter:progid:DXImageTransform.Microsoft.AlphaImageLoader
		(src="",sizingMethod="crop");
		background:none;
		第一个规则使用专有的过滤器加载PNG并应用alpha透明度。原来的背景图像仍然会显示，所以第二个规则隐藏原来的背景图像。
	2、使用IE PNG fix技术
			这需要使用一种Microsoft专有的CSS扩展--行为(behavior)。
			下载合适的.htc文件并在IE6专用的样式表中引用它，就可以在任何元素上启用PNG透明度
			behavior:url(xxx.htc);
			网址：http://www.twinhelix.com/css/iepngfix/
伪类
	IE7和更低版本不支持在除链接之外的其它元素上使用伪类选择器
在导航条中突出显示当前页面
	在每个页面的主体元素中添加一个ID或类名，从而指出用户当前在哪个页面或部分中。然后，在导航列表中的每个项中添加一个对应的ID或类名。可以使用主体的ID和列表ID/类的唯一组合在站点导航中突出显示当前部分或页面。
rel属性的使用
	在分布中使用rel属性表示结果集中的前一个和下一个页面。
border-spacing属性
	IE7和更低版本不理解这个属性，因此需要使用老式但可靠的cellspacing属性。
margin:auto
	混杂模式中的IE5.X和IE6不支持。IE将text-align:center;误解为让所有东西居中。可以利用这一点实现居中。
max-width和min-width
	IE6及以下不支持，可以使用js实现
CSS布局
	所有CSS布局技术的根本都是3个基本概念：定位、浮动和外边距操纵。
设计布局
	1、检查设计，寻找重复的模式。包括页面结构中的模式或在站点中元素反复出现的方式。在这个阶段，不应该太关注表现方式，而是应该注意结构和意义。先把页面划分分大的结构性区域，比如容器、页眉、内容区域和页脚。
	2、将注意力转移到内容区域本身，开始建立网格结构。设计有多少个不同的内容区域，它们有什么差异？从布局的角度来说，内容区域是确实不一样，还是可以被同等看待？大多数设计只有几个独特的内容区域，所以应该寻找共同的特征而不是视觉表现。
	3、在各个内容区域中寻找不同的布局结构。是否需要把某些信息分为两列、三列或四列？与前面不同，这些布局结构往往非常灵活，在各个页面之间常常有变化。将这些结构与前一步相结合，可以形成每个页面的结构计划。
	4、现在可以开始关注不同类型的内容，内容是新闻稿、文章还是公告？给每个内容块起一个有意义的名称，然后分析他们的关系。
	5、查看每个内容块的结构，看看不同的类型中是否有共同的模式。例如，文章和新闻稿可能都有醒目的页眉和页脚，所以可以加上相应的标识。即使页眉和页脚看起来不一样，实际上也没关系，因为以后可以根据上下文应用样式。应该尽量采用一般的类名，然后根据上下文应用样式。
	6、找出模式并确定命名约定之后，最好马上开始定义将使用的元素，还应该记下颜色、尺寸等信息。
流式布局--相对于浏览器宽度来设置元素的宽度
	1、将容器宽度设置为窗口总宽度的百分数。如果设计者使用的宽度为960像素，而大多数用户的浏览器窗口设置为1250像素，那么使用的百分数是(960/1250)x100=76.8%
	2、容器中所有内容的宽度都使用百分比设置。
	3、添加max-width和min-width。如果是文本，可以用em为单位。
弹性布局--相对于字号来设置元素的宽度。
	1、设置基字号，让1em大致相当于10像素。
	2、只以em为单位设置容器的宽度。容器内部仍使用百分比为单位。
faux列
	内容区域的背景。
	方法-在一个占据布局最大高度的元素上应用重复的背景图像。
	对于流式布局，可以使用百分比来设置。
高度相等的列
	这种技术的关键是给每个框设置在的底内边距，然后用数值相似的负外边距消除这个高度。这会导致每个列溢出容器元素。如果把容器的overflow属性设置为hidden，列就在最高点被裁切。
bug修复
	捕捉bug
		1、在处理CSS bug时最好先假设自己做错了，然后考虑浏览器的bug
	常见的CSS问题
		1、输入错误。
		2、有时规则不生效，可能是因为优先级的问题	
		3、外边距叠加问题
			具有块级子元素的元素计算高度的方式：如果元素没有垂直边框或内边距，那么它的高度就是它包含的子元素的顶部和底部边框边缘之间的距离。
	hasLayout
	IE使用布局概念来控制元素的尺寸和定位。那些“拥有布局”（hava layout)的元素负责本身及其子元素的尺寸设置和定位。如果一个元素“没有拥有布局”，那么它的尺寸和位置由最近的拥有布局的祖先元素控制。
	默认拥有布局的元素包括：
		body
		html(标准模式中)
		table
		tr、td
		img
		hr
		input、select、textarea、button
		iframe、embed、object、applet
		marquee
	在CSS中无法显示地设置布局。
	可以使用JS函数hasLayout查看一个元素是否拥有布局。元素拥有属性就返回true,否则返回false。此属性是只读的。
	设置以下CSS属性会自动地使元素拥有布局
		float:left或right
		display:inline-block
		width:任何值
		height:任何值
		zoom:任何值
		writing-mode:tb-rl
	在IE7中，还包括以下属性
		overflow:hidden、scroll或auto
		min-width:任何值
		max-width:除none之外的任何值
	hasLayout带来的问题
		1、如果一个文本段落靠着一个浮动元素，如果段落拥有布局，那么它就被限制为矩形，因此阻止文本围绕浮动元素。
		2、如果元素的内容变得比元素本身大，拥有布局的元素会错误地扩展以便适应内容的尺寸。
		3、拥有布局的元素不会收缩
		4、布局元素对浮动进行自动清理
		5、相对定位的元素没有布局
		6、在拥有布局的元素之间外边距不叠加
		7、在没有布局的块级链接上，单击区域只覆盖文本
		8、在滚动时，列表项上的背景图像间歇性的显示和消失
	*html hack
		应用于IE6和更低版本
	双外边距浮动bug
		使任何浮动元素上的外边距加倍
		修复：设置display:inline;
	3像素文本偏移bug
		当文本与一个浮动元素想邻时，这个bug就会表现出来。
		例：假设将一个元素向左浮动，并且不希望相邻段落中的文本围绕浮动元素，你可能会在段落上应用一个左外边距，其宽度等于浮动元素的宽度：
		.myFloat{float:left; width:200px;}
		p{margin-left:200px;}
		这样，在文本和浮动元素之间就会出现一个莫名其妙的3像素间隙。一旦浮动元素停下来，3像素间距就会消失。
		修复方法：
			使包含文本的元素拥有布局
			将外边距重新设置为零
			在浮动元素上设置一个负的3像素右外边距
	IE6的重复字符bug
		在某些情况下，一系列浮动元素的最后一个元素中的最后几个字符会在浮动元素下面重复出现。
		当在一系列浮动元素的第一个和最后一个元素之间有多个注释时，就会出现这个bug。
		解决方法：从HTML代码中删除注释
	IE6的藏猫猫bug
		在某些条件下文本看起来消失了，只有在重新加载页面时才再度出现。
		一个浮动元素后面跟着一些非浮动元素，然后是一个清理元素，所有这些元素都包含在一个设置了背景颜色或图像的父元素中。如果清理元素碰到了浮动元素，那么中间的非浮动元素看起来消失了，隐藏到父元素的背景颜色或图像后面，只有在刷新页面时才重新出现
		解决方法：
			1、给容器元素指定行高。
			2、将浮动元素和容器元素的position属性设置为relative。
	相对容器中的绝对定位
		因为相对定位的元素没有拥有布局，所以绝对定位的元素相对于视口进行定位
		解决方法：使相对容器拥有布局